using System;
using System.Collections.Generic;
using System.Linq;

// To execute C#, please define "static void Main" on a class
// named Solution.

public class Desk{
    public int DeskId { get; set; }
    public bool IsWindowSeat { get; set; }
}

public class DeskBooking{
    public Desk DeskInfo { get; set; }
    public DateTime BookingDate { get; set; }
}

class Solution
{
    List<Desk> desks;
    List<DeskBooking> deskBookings;
    public Solution()
    {
         desks = new List<Desk>(){
            new Desk(){DeskId = 1,IsWindowSeat=false},
            new Desk(){DeskId = 2,IsWindowSeat=true},
        };

        deskBookings = new List<DeskBooking>(){
            new DeskBooking(){
                 DeskInfo = new Desk(){DeskId = 1,IsWindowSeat=false},
                 BookingDate = new DateTime(2024,08,29)
                },
           new DeskBooking(){
                 DeskInfo = new Desk(){DeskId = 1,IsWindowSeat=false},
                 BookingDate = new DateTime(2024,08,31)
                },
            new DeskBooking(){
                 DeskInfo = new Desk(){DeskId = 2,IsWindowSeat=true},
                 BookingDate = new DateTime(2024,09,01)
                },    
        };
    }
       
     public DateTime GetAvailableDateForDesk(int deskId,DateTime currentDate)
        {
           var desk = desks.SingleOrDefault(x => x.DeskId == deskId);
           if(desk == null)
             throw new ArgumentException("Invalid desk ID",nameof(deskId));

            var bookings = deskBookings.Where(b => b.DeskInfo.DeskId == deskId && b.BookingDate.ToShortDateString() == currentDate.ToShortDateString());

            if(bookings.Any())
            {
                var bookingDates  = deskBookings.Where(b => b.DeskInfo.DeskId == deskId).Select(x => x.BookingDate);

                currentDate = currentDate.AddDays(1);

                while(bookingDates.Any(x => 
                x.ToShortDateString() == currentDate.ToShortDateString()))
                {
                    currentDate = currentDate.AddDays(1);
                }
            }

            return currentDate;
        }

      public DateTime GetAvailableWindowSeatForDate(DateTime start, bool hasWindow = true)
            {
               var deskWithWindowSeat = desks.Where(x => x.IsWindowSeat == hasWindow);            
                if (deskWithWindowSeat.Count() == 0)
                {
                    throw new ArgumentException("No Desks With windows exist");
                }
                
               // var bookings = deskBookings.Where(x => !deskWithWindowSeat.Contains(x.DeskInfo));
               
               if(!deskBookings.Any(x => !deskWithWindowSeat.Contains(x.DeskInfo)))
               {
                var bookingDates  =deskBookings.Where(x => x.DeskInfo.IsWindowSeat == hasWindow).Select(x => x.BookingDate);

                while(bookingDates.Any(x => 
                x.ToShortDateString() == start.ToShortDateString()))
                {
                    start = start.AddDays(1);
                }
               }
                return start;
            }


    static void Main(string[] args)
    {
        Solution solutions = new Solution();
        try
        {
        //  DateTime AvailableDate = solutions.GetAvailableDateForDesk(5,DateTime.Now);
        //  Console.WriteLine("Available Date : " + AvailableDate.ToShortDateString());

        DateTime AvailableDate = solutions.GetAvailableWindowSeatForDate(new DateTime(2024,09,01));
         Console.WriteLine("Available Date : " + AvailableDate.ToShortDateString());

        }
        catch(Exception ex){
         Console.WriteLine(ex.Message);
        }
       
    }
}
